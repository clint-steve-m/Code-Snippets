<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>Snippet -  Date extension for seconds, minutes etc</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>All</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>extension Date {
    func timeAgoDisplay() -&gt; String {
        let secondsAgo = Int(Date().timeIntervalSince(self))
        
        let minute = 60
        let hour = 60 * minute
        let day = 24 * hour
        let week = 7 * day
        let month = 4 * week
        let year = 12 * month
        
        var quotient: Int
        var unit: String
        
        if secondsAgo &lt; minute {
            quotient = secondsAgo
            unit = "second"
        } else if secondsAgo &lt; hour {
            quotient = secondsAgo / minute
            unit = "min"
        } else if secondsAgo &lt; day {
            quotient = secondsAgo / hour
            unit = "hour"
        } else if secondsAgo &lt; week {
            quotient = secondsAgo / day
            unit = "day"
        } else if secondsAgo &lt; month {
            quotient = secondsAgo / week
            unit = "week"
        } else if secondsAgo &lt; year {
            quotient = secondsAgo / month
            unit = "month"
        } else {
            quotient = secondsAgo / year
            unit = "year"
        }
        return "\(quotient) \(unit)\(quotient == 1 ? "" : "s") ago"
    }
    
    func convertDateToString(from num: NSNumber?) -&gt; String? {
        guard num != nil else {return nil}
        let numAsDate = Date(timeIntervalSinceReferenceDate: num as! TimeInterval)
        let dateFormatter = DateFormatter()
        dateFormatter.dateFormat = "yyyy-MM-dd'T'HH:mm:ss.SSSZ"
        return dateFormatter.string(from: numAsDate)
    }
    
    func getCurrentDateTime() -&gt; String {
        let currentDateTime = Date().timeIntervalSinceReferenceDate
        return convertDateToString(from: currentDateTime as NSNumber)!
    }
    
    func timePosted(from num: NSNumber?) -&gt; String? {
        guard let timePosted = (convertDateToString(from: num)) else { return nil}
        let currentTime = getCurrentDateTime()
        
        let Dateformatter = DateFormatter()
        Dateformatter.dateFormat = "yyyy-MM-dd'T'HH:mm:ss.SSSZ"
        
        guard let date1 = Dateformatter.date(from: timePosted) else { return nil }
        let date2 = Dateformatter.date(from: currentTime)
        
        let distanceBetweenDates: TimeInterval? = date2?.timeIntervalSince(date1)
        
        let secondsinAMinute: Double = 60
        let secondsInAnHour: Double = 3600
        let secondsInDays: Double = 86400
        let secondsInWeek: Double = 604800
        guard let distanceBetweenDatesGuarded = distanceBetweenDates else { return nil }
        
        let minutesBetweenDates = Int((distanceBetweenDatesGuarded / secondsinAMinute))
        let hoursBetweenDates = Int((distanceBetweenDatesGuarded / secondsInAnHour))
        let daysBetweenDates = Int((distanceBetweenDatesGuarded / secondsInDays))
        let weekBetweenDates = Int((distanceBetweenDatesGuarded / secondsInWeek))
        
//        let calculatedTime = Int(distanceBetweenDates!)
        
        switch fabs(distanceBetweenDatesGuarded) {
        case 0..&lt;60:
            return "\(distanceBetweenDatesGuarded) seconds ago" // seconds
        case 60..&lt;3600:
            return "\(minutesBetweenDates) minutes ago" // minutes
        case 3600..&lt;86400:
            return "\(hoursBetweenDates) hours ago" // hours
        case 86400..&lt;172800:
            return "\(daysBetweenDates) day ago" // day
        default:
            return "\(daysBetweenDates) days ago" // days
        }
        
//        let convertedPostedTime = (hoursBetweenDates &gt; 24) ? "\(hoursBetweenDates)" : "\(daysBetweenDates)"
        
//        print(distanceBetweenDates, "distance between dates")
//        print(minutesBetweenDates, "seconds")
//        print(weekBetweenDates,"weeks")//0 weeks
//        print(daysBetweenDates,"days")//5 days
//        print(hoursBetweenDates,"hours")//120 hours
//        print("convertedPostedTime: \(convertedPostedTime)")
    }
}
</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>2D58CC14-E051-4026-9BBB-C2236F3DB16E</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetPlatformFamily</key>
	<string>iphoneos</string>
	<key>IDECodeSnippetSummary</key>
	<string>calculate seconds, minutes, hours, days and weeks</string>
	<key>IDECodeSnippetTitle</key>
	<string>Date: seconds, minutes etc. extension</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
